generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Recipe {
  id           String   @id @default(cuid())
  name         String
  description  String?
  steps        String[]
  ingredients  String[]
  images       String[]
  ratings      Rating[]
  totalRatings Int      @default(0)
  sumRatings   Float    @default(0)
  rating       Float    @default(0)
  author       User?    @relation(fields: [authorId], references: [id])
  authorId     String?
  createdAt    DateTime @default(now()) @map(name: "created_at")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  accessToken   String?
  refreshToken  String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  recipes       Recipe[]
  account       Account[]
  session       Session[]
  ratings        Rating[]

  @@map(name: "users")
}

model Rating {
  id        String   @id @default(cuid())
  value     Float
  createdAt DateTime @default(now()) @map(name: "created_at")

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
  
  @@unique([recipeId, userId])
  @@map(name: "ratings")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
